from PyQt6 import QtCore, QtGui, QtWidgets,uic
import sys
class Ui(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui, self).__init__()
        uic.loadUi('login.ui', self)# đổi theo tên file
        self.show()
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
window = Ui()
app.exec()
- dangky-
from PyQt6 import QtCore, QtGui, QtWidgets
from register_handler import register, create_db,suggest_username  # Import file xử lý đăng ký

     self.lineEdit_email.textChanged.connect(lambda :suggest_username(self))
        self.pushButton_dangki.clicked.connect(self.handle_register)
       def handle_register(self):
            username = self.lineEdit_dnhap.text()
            email = self.lineEdit_email.text()
            phone = self.lineEdit_dthoai.text()
            password = self.lineEdit_mkhau.text()
            confirm_password = self.lineEdit_nhaplaimk.text()

            register(username, email, phone, password, confirm_password, self.centralwidget)
if __name__ == "__main__":
    import sys
    create_db()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
- dangnhap-
from register_handler import check_login
self.dangnhap.clicked.connect(self.handle_login)
    def handle_login(self):
        username = self.username.text()
        password = self.password.text()

        if check_login(username, password):
            QtWidgets.QMessageBox.information(None, "Thông báo", "Đăng nhập thành công!")
        else:
            QtWidgets.QMessageBox.warning(None, "Lỗi", "Sai tài khoản hoặc mật khẩu!")
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
    """ kiểm tra bảng"""
# import sqlite3
#
# # Đảm bảo đường dẫn đúng với vị trí của database
# DATABASE_PATH = r"C:\Users\Admin\PycharmProjects\PythonProject1\Quản lý vé xem phim\user.db"
#
# conn = sqlite3.connect(DATABASE_PATH)
# cursor = conn.cursor()
#
# # Tạo bảng users nếu chưa có
# cursor.execute("""
#     CREATE TABLE IF NOT EXISTS users (
#         id INTEGER PRIMARY KEY AUTOINCREMENT,
#         username TEXT NOT NULL,
#         email TEXT NOT NULL
#     )
# """)
#
# conn.commit()
# conn.close()
#
# print("✅ Bảng 'users' đã được tạo thành công!")
kiểm tra bảng
import sqlite3

DATABASE_PATH = r"C:\Users\Admin\PycharmProjects\PythonProject1\Quản lý vé xem phim\user.db"

conn = sqlite3.connect(DATABASE_PATH)
cursor = conn.cursor()

# Lấy danh sách bảng trong database
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()

print("Các bảng trong database:", tables)

conn.close()

 self.pushButton_Chinhsua_3.clicked.connect(lambda: app_handler.edit_user(self))
        self.pushButton_Xoauser.clicked.connect(lambda: app_handler.delete_user_event(self))
        app_handler.load_users(self)
        import app_handler
_____ cách chèn hình ảnh ừ folder images_________
import os
def setupUi(self, MainWindow):
        # Lấy đường dẫn thư mục hiện tại của script
        current_dir = os.path.dirname(os.path.abspath(__file__))
        images_folder = os.path.join(current_dir, "images")
         # Load hình ảnh từ thư mục images
        self.phim1.setPixmap(QtGui.QPixmap(os.path.join(images_folder, "poster1.png")))

  QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton_Chinhsua_3.clicked.connect(lambda: app_handler.edit_user(self))
        self.pushButton_Xoauser.clicked.connect(lambda: app_handler.delete_user_event(self))
        app_handler.load_users(self)
KÊẾT NỐI VỚI FILE DATA
import os
import sqlite3

# Lấy đường dẫn thư mục "Quản lý vé xem phim"
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
# Đường dẫn đến thư mục "data"
data_folder = os.path.join(project_root, "data")

# Đường dẫn đầy đủ đến file users.db
DATABASE_PATH = os.path.join(data_folder, "users.db")


# Kiểm tra xem file database có tồn tại không
if not os.path.exists(DATABASE_PATH):
    print(f"❌ Lỗi: Không tìm thấy database tại {DATABASE_PATH}")
else:
    print(f"✅ Database được tìm thấy tại {DATABASE_PATH}")

# Kết nối database
conn = sqlite3.connect(DATABASE_PATH)
cursor = conn.cursor()

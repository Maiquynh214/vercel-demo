
import sqlite3  # Th∆∞ vi·ªán l√†m vi·ªác v·ªõi SQLite
from PyQt6 import QtWidgets
import os
import sqlite3

# L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c "Qu·∫£n l√Ω v√© xem phim"
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file users.db
DATABASE_PATH = os.path.join(project_root, "users.db")

# Ki·ªÉm tra xem file database c√≥ t·ªìn t·∫°i kh√¥ng
if not os.path.exists(DATABASE_PATH):
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y database t·∫°i {DATABASE_PATH}")
else:
    print(f"‚úÖ Database ƒë∆∞·ª£c t√¨m th·∫•y t·∫°i {DATABASE_PATH}")

# K·∫øt n·ªëi database
conn = sqlite3.connect(DATABASE_PATH)
cursor = conn.cursor()

# ==========================
# üîπ PH·∫¶N X·ª¨ L√ù DATABASE üîπ
# ==========================
def get_db_connection():
    """T·∫°o v√† tr·∫£ v·ªÅ m·ªôt k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu SQLite."""
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row  # Gi√∫p truy xu·∫•t d·ªØ li·ªáu d·∫°ng t·ª´ ƒëi·ªÉn
    return conn


def get_all_users():
    """L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng t·ª´ b·∫£ng users."""
    # conn = get_db_connection()
    # cursor = conn.cursor()
    # cursor.execute("SELECT id, username, email FROM users")
    # users = cursor.fetchall()
    # conn.close()
    # return [dict(user) for user in users]  # Chuy·ªÉn th√†nh danh s√°ch dictionary
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT username, email, phone FROM users")  # L·∫•y th√™m s·ªë ƒëi·ªán tho·∫°i
    users = cursor.fetchall()
    conn.close()
    return users

def add_user(username: str, email: str):
    """Th√™m m·ªôt ng∆∞·ªùi d√πng m·ªõi v√†o database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
    conn.commit()
    conn.close()


def delete_user(user_id: int):
    """X√≥a m·ªôt ng∆∞·ªùi d√πng d·ª±a tr√™n ID."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()
    print(f"‚úÖ ƒê√£ xo√° ng∆∞·ªùi d√πng ID {user_id} kh·ªèi database")


def update_user(user_id: int, username: str, email: str, phone: str):
    """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET username = ?, email = ?, phone = ? WHERE id = ?",
                   (username, email, phone, user_id))
    conn.commit()
    conn.close()
    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin cho ng∆∞·ªùi d√πng ID {user_id}")


# ==========================
# üîπ PH·∫¶N X·ª¨ L√ù GIAO DI·ªÜN üîπ
# ==========================
def load_users(main_window):
    """Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng trong MainWindow.py"""
    users = get_all_users()
    main_window.tableWidget_3.setRowCount(len(users))  # C·∫≠p nh·∫≠t s·ªë h√†ng

    for row, user in enumerate(users):
        try:
            main_window.tableWidget_3.setItem(row, 0, QtWidgets.QTableWidgetItem(str(user[0])))  # ID
            main_window.tableWidget_3.setItem(row, 1, QtWidgets.QTableWidgetItem(user[1]))  # Username
            main_window.tableWidget_3.setItem(row, 2, QtWidgets.QTableWidgetItem(user[2]))  # Email
            main_window.tableWidget_3.setItem(row, 3, QtWidgets.QTableWidgetItem(user[3]))  # Phone
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t b·∫£ng t·∫°i h√†ng {row}: {e}")
def edit_user(ui):
    """X·ª≠ l√Ω s·ª± ki·ªán ch·ªânh s·ª≠a ng∆∞·ªùi d√πng."""
    selected_row = ui.tableWidget_3.currentRow()
    if selected_row < 0:
        QtWidgets.QMessageBox.warning(None, "L·ªói", "Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ ch·ªânh s·ª≠a.")
        return

    user_id = ui.tableWidget_3.item(selected_row, 0).text()  # ID ng∆∞·ªùi d√πng
    username = ui.tableWidget_3.item(selected_row, 1).text()
    email = ui.tableWidget_3.item(selected_row, 2).text()
    phone = ui.tableWidget_3.item(selected_row, 3).text()

    new_username, ok0 = QtWidgets.QInputDialog.getText(None, "Ch·ªânh s·ª≠a", "Nh·∫≠p t√™n m·ªõi:", text=username)
    new_email, ok1 = QtWidgets.QInputDialog.getText(None, "Ch·ªânh s·ª≠a", "Nh·∫≠p email m·ªõi:", text=email)
    new_phone, ok2 = QtWidgets.QInputDialog.getText(None, "Ch·ªânh s·ª≠a", "Nh·∫≠p sƒët m·ªõi:", text=phone)

    if ok0 and ok1 and ok2:
        update_user(user_id, new_username, new_email, new_phone)  # Truy·ªÅn ƒë√∫ng user_id
        load_users(ui)  # C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi ch·ªânh s·ª≠a

def delete_user_event(ui):
    """X·ª≠ l√Ω s·ª± ki·ªán xo√° ng∆∞·ªùi d√πng."""
    selected_row = ui.tableWidget_3.currentRow()
    if selected_row < 0:
        QtWidgets.QMessageBox.warning(None, "L·ªói", "Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ xo√°.")
        return

    user_id = ui.tableWidget_3.item(selected_row, 0).text()  # L·∫•y ID ng∆∞·ªùi d√πng
    confirm = QtWidgets.QMessageBox.question(None, "X√°c nh·∫≠n",
                                             f"B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ng∆∞·ªùi d√πng ID {user_id}?",
                                             QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)

    if confirm == QtWidgets.QMessageBox.Yes:
        delete_user(user_id)  # Xo√° ng∆∞·ªùi d√πng theo ID
        load_users(ui)  # C·∫≠p nh·∫≠t l·∫°i danh s√°ch
        print(f"‚úÖ ƒê√£ xo√° ng∆∞·ªùi d√πng ID {user_id}")

